//@author: a0111770r



	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java
	 */

 *
 */
public class FlexiPlannerUI implements HotKeyListener {
	private JLabel displayedMonth, displayedYear;
	private JLabel showUserGuideLabel;
	private JLabel displayTasksLabel;
	private JLabel showBlockedLabel;
	private JLabel showUserRecentAddedTaskLabel;
	private JLabel showCategoryLabel;
	private JPanel schedulerPanel;
	private JButton prevMonth, nextMonth;
	private JTable calendar;
	private JTable displayTaskTable;
	private DefaultTableModel calendarDTM;
	private DefaultTableModel displayTasksTableDTM;
	private Border border;
	private JXCollapsiblePane showUserGuideCollapsePane;
	private JXCollapsiblePane showTasksCollapsePane;
	private JXCollapsiblePane showUserRecentAddedTaskCollapsePane;
	private JXCollapsiblePane showBlockedCollapsePane;
	private JXCollapsiblePane showCategoryCollapsePane;
	private JTextArea showUserRecentAddedTaskCommand;
	private JTextArea commandFeedback;
	private JTextArea showCategory;
	private JTextArea showUserGuide;
	private JTextArea showBlocked;
	private JScrollPane calendarScroll;
	private JScrollPane showUserGuideScroll;
	private JScrollPane showTasksScroll;
	private JScrollPane showUserRecentAddedTaskScroll;
	private JScrollPane showCategoryScroll;
	private JScrollPane showBlockedScroll;
	@SuppressWarnings("rawtypes")
	private JComboBox selectYear;
	private JFrame schedulerFrame;
	private JTextField inputCommand;
	private int actualYear, actualMonth, actualDay, currentDisplayedYear,
			currentDisplayedMonth;
	private String[] months = { "January", "February", "March", "April", "May",
			"June", "July", "August", "September", "October", "November",
			"December" };
	private String[] columnNames = { "No:", "Priority", "Category", "Task",
			"From", "To" };
	private Object[][] dummyData = { { "", "", "", "", "", "" }, };
	private String userCommand;
	private int overDueRow = 0;
	private static Logic logic;

	
	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java
	 */

	 */
	public FlexiPlannerUI() {
		try {
			logic = new Logic();
			schedulerFrame = new JFrame("FlexiPlanner");
		} catch (FileNotFoundException e) {
			System.out.println("Error");
		} catch (IOException e) {
			System.out.println("Error");
		} catch (ParseException e) {
			e.printStackTrace();
		}
	}
	
	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java
	 */

	 */
	public void loadUI() {
		try {
			loadInterfaceandData();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java
	 */

	 * @throws IOException
	 * @throws ParseException
	 */
	@SuppressWarnings({ "serial", "rawtypes" })
	private void loadInterfaceandData() throws IOException, ParseException {
		JFrame.setDefaultLookAndFeelDecorated(false);
		schedulerFrame.setUndecorated(false);
		/**
		 * ICONIFIED so as to still run the application although close button is
		 * pressed.
		 **/
		schedulerFrame.setDefaultCloseOperation(JFrame.ICONIFIED);
		ImageIcon img = new ImageIcon(getClass().getResource("/resources/logo.png"));
		schedulerFrame.setIconImage(img.getImage());
		if (System.getProperty("os.name").equals("Mac OS X")) {
			Application.getApplication().setDockIconImage(new
			ImageIcon(getClass().getResource("/resources/logo.png")).getImage());
		}
		schedulerFrame.setSize(900, 620);// set frame size
		schedulerFrame.setResizable(false);
		schedulerFrame.setLocationRelativeTo(null);
		schedulerFrame.setVisible(true);
		calendarDTM = new DefaultTableModel() {
			public boolean isCellEditable(int rowIndex, int mColIndex) {
				return false;
			}
		};//set the calendar cells to disallow editting
		calendar = new JTable(calendarDTM);
		calendarScroll = new JScrollPane(calendar,
				JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
				JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		schedulerPanel = new JPanel(null);
		schedulerFrame.getContentPane().add(schedulerPanel);// add panel to
		// frame
		displayTaskTable = new JTable(new DefaultTableModel(dummyData,
				columnNames) {
			public boolean isCellEditable(int rowIndex, int mColIndex) {
				return false;
			}
		});//set the displaytaskTable cells to disallow editting
		displayTasksTableDTM = (DefaultTableModel) displayTaskTable.getModel();
		displayTasksTableDTM.setRowCount(50);
		setDisplayTaskTableProperties();// Set displayTaskTable restrictions
		
		GregorianCalendar cal = new GregorianCalendar();// get calendar format
		actualDay = cal.get(GregorianCalendar.DAY_OF_MONTH);
		actualMonth = cal.get(GregorianCalendar.MONTH);
		actualYear = cal.get(GregorianCalendar.YEAR);
		currentDisplayedMonth = actualMonth;
		currentDisplayedYear = actualYear;
		displayedMonth = new JLabel("January");
		displayedMonth.setBounds(
				160 - displayedMonth.getPreferredSize().width / 2, 5, 100, 25);
		displayedMonth.setForeground(Color.BLUE);
		displayedMonth.setFont(new Font("Times New Roman", Font.BOLD, 15));
		displayedYear = new JLabel("Select Year:");
		displayedYear.setBounds(10, 295, 80, 20);
		displayedYear.setForeground(Color.BLUE);
		selectYear = new JComboBox();
		selectYear.setBounds(230, 295, 80, 20);
		selectYear.setForeground(Color.BLUE);
		prevMonth = new JButton("<");
		prevMonth.setBounds(10, 5, 50, 25);
		prevMonth.setForeground(Color.BLUE);
		nextMonth = new JButton(">");
		nextMonth.setBounds(260, 5, 50, 25);
		nextMonth.setForeground(Color.BLUE);
		calendarScroll.setBounds(10, 35, 300, 250);
		border = BorderFactory.createLineBorder(Color.BLACK);
		
		showUserGuideLabel = new JLabel();
		showUserGuideLabel.setFont(new Font("Times New Roman", Font.BOLD, 15));
		showUserGuideLabel.setForeground(Color.BLUE);
		showUserGuideLabel.setBorder(BorderFactory.createCompoundBorder(border,
				BorderFactory.createEmptyBorder(5, 5, 5, 5)));
		showUserGuideLabel.setText("Guide");
		showUserGuide = new JTextArea();
		showUserGuide.setFont(new Font("Times New Roman", Font.BOLD, 14));
		showUserGuide.setForeground(Color.CYAN);
		showUserGuide.setBackground(Color.BLUE);
		showUserGuide.setText(getGuide());
		showUserGuide.setLineWrap(true);
		showUserGuide.setWrapStyleWord(true);
		showUserGuide.setEditable(false);
		showUserGuideScroll = new JScrollPane(showUserGuide,
				JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
				JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		showUserGuideScroll.setColumnHeaderView(showUserGuideLabel);
		showUserGuideCollapsePane = new JXCollapsiblePane();
		showUserGuideCollapsePane.setContentPane(showUserGuideScroll);
		showUserGuideCollapsePane.setCollapsed(true);
		showUserGuideCollapsePane.setBounds(320, 4, 570, 0);
		showUserGuideCollapsePane.setPreferredSize(new Dimension(570, 495));
		showUserGuideCollapsePane.setCollapsed(false);
		
		displayTasksLabel = new JLabel();
		displayTasksLabel.setFont(new Font("Times New Roman", Font.BOLD, 15));
		displayTasksLabel.setForeground(Color.BLUE);
		displayTasksLabel.setBorder(BorderFactory.createCompoundBorder(border,
				BorderFactory.createEmptyBorder(5, 5, 5, 5)));
		displayTasksLabel.setText("Tasks");
		showTasksScroll = new JScrollPane(displayTaskTable,
				JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
				JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		showTasksScroll.setPreferredSize(new Dimension(570, 460));
		showTasksCollapsePane = new JXCollapsiblePane();
		showTasksCollapsePane.add(displayTasksLabel);
		showTasksCollapsePane.add(showTasksScroll);
		showTasksCollapsePane.setCollapsed(true);
		showTasksCollapsePane.setBounds(320, 4, 570, 0);
		showTasksCollapsePane.setPreferredSize(new Dimension(570, 495));
		
		showUserRecentAddedTaskLabel = new JLabel();
		showUserRecentAddedTaskLabel.setFont(new Font("Times New Roman",
				Font.BOLD, 15));
		showUserRecentAddedTaskLabel.setForeground(Color.BLUE);
		showUserRecentAddedTaskLabel.setBorder(BorderFactory
				.createCompoundBorder(border,
						BorderFactory.createEmptyBorder(5, 5, 5, 5)));
		showUserRecentAddedTaskLabel.setText("Recent Added Tasks");
		showUserRecentAddedTaskCommand = new JTextArea();
		showUserRecentAddedTaskCommand.setFont(new Font("Times New Roman",
				Font.BOLD, 14));
		showUserRecentAddedTaskCommand.setForeground(Color.CYAN);
		showUserRecentAddedTaskCommand.setBackground(Color.BLUE);
		showUserRecentAddedTaskCommand.setText("");
		showUserRecentAddedTaskCommand.setAutoscrolls(false);
		showUserRecentAddedTaskCommand.setLineWrap(true);
		showUserRecentAddedTaskCommand.setWrapStyleWord(true);
		showUserRecentAddedTaskCommand.setEditable(false);
		showUserRecentAddedTaskScroll = new JScrollPane(
				showUserRecentAddedTaskCommand,
				JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
				JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		showUserRecentAddedTaskScroll
				.setColumnHeaderView(showUserRecentAddedTaskLabel);
		showUserRecentAddedTaskCollapsePane = new JXCollapsiblePane();
		showUserRecentAddedTaskCollapsePane
				.setContentPane(showUserRecentAddedTaskScroll);
		showUserRecentAddedTaskCollapsePane.setCollapsed(true);
		showUserRecentAddedTaskCollapsePane.setBounds(320, 4, 570, 0);
		showUserRecentAddedTaskCollapsePane.setPreferredSize(new Dimension(570,
				495));
		
		showCategoryLabel = new JLabel();
		showCategoryLabel.setFont(new Font("Times New Roman", Font.BOLD, 15));
		showCategoryLabel.setForeground(Color.BLUE);
		showCategoryLabel.setBorder(BorderFactory.createCompoundBorder(border,
				BorderFactory.createEmptyBorder(5, 5, 5, 5)));
		showCategoryLabel.setText("Categories");
		showCategory = new JTextArea();
		showCategory.setFont(new Font("Times New Roman", Font.BOLD, 14));
		showCategory.setForeground(Color.CYAN);
		showCategory.setBackground(Color.BLUE);
		showCategory.setLineWrap(true);
		showCategory.setWrapStyleWord(true);
		showCategory.setText(logic.getCategory());
		showCategory.setEditable(false);
		showCategoryScroll = new JScrollPane(showCategory,
				JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
				JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		showCategoryScroll.setColumnHeaderView(showCategoryLabel);
		showCategoryCollapsePane = new JXCollapsiblePane();
		showCategoryCollapsePane.setContentPane(showCategoryScroll);
		showCategoryCollapsePane.setBounds(10, 325, 300, 0);
		showCategoryCollapsePane.setPreferredSize(new Dimension(300, 175));
		showCategoryCollapsePane.setCollapsed(true);
		showCategoryCollapsePane.setCollapsed(false);
		
		showBlockedLabel = new JLabel();
		showBlockedLabel.setFont(new Font("Times New Roman", Font.BOLD, 15));
		showBlockedLabel.setForeground(Color.BLUE);
		showBlockedLabel.setBorder(BorderFactory.createCompoundBorder(border,
				BorderFactory.createEmptyBorder(5, 5, 5, 5)));
		showBlockedLabel.setText("Blocked");
		showBlocked = new JTextArea();
		showBlocked.setFont(new Font("Times New Roman", Font.BOLD, 14));
		showBlocked.setForeground(Color.CYAN);
		showBlocked.setBackground(Color.BLUE);
		showBlocked.setText("");
		showBlocked.setAutoscrolls(false);
		showBlocked.setLineWrap(true);
		showBlocked.setWrapStyleWord(true);
		showBlocked.setEditable(false);
		showBlockedScroll = new JScrollPane(showBlocked,
				JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
				JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		showBlockedScroll.setColumnHeaderView(showBlockedLabel);
		showBlockedCollapsePane = new JXCollapsiblePane();
		showBlockedCollapsePane.setContentPane(showBlockedScroll);
		showBlockedCollapsePane.setCollapsed(true);
		showBlockedCollapsePane.setBounds(10, 325, 300, 0);
		showBlockedCollapsePane.setPreferredSize(new Dimension(300, 175));
		
		commandFeedback = new JTextArea("");
		commandFeedback.setBackground(new Color(240, 240, 240));
		commandFeedback.setForeground(Color.RED);
		commandFeedback.setFont(new Font("Times New Roman", Font.BOLD, 15));
		commandFeedback.setEditable(false);
		commandFeedback.setLineWrap(true);
		commandFeedback.setWrapStyleWord(true);
		commandFeedback.setBounds(11, 500, 870, 40);
		
		inputCommand = new JTextField();
		inputCommand.setForeground(Color.BLUE);
		inputCommand.setBackground(Color.WHITE);
		inputCommand.setFont(new Font("Times New Roman", Font.BOLD, 20));
		inputCommand.setBounds(10, 540, 880, 46);
		
		// add components to panel
		schedulerPanel.add(displayedMonth);
		schedulerPanel.add(displayedYear);
		schedulerPanel.add(selectYear);
		schedulerPanel.add(prevMonth);
		schedulerPanel.add(nextMonth);
		schedulerPanel.add(calendarScroll);
		schedulerPanel.add(showUserGuideCollapsePane);
		schedulerPanel.add(showTasksCollapsePane);
		schedulerPanel.add(showUserRecentAddedTaskCollapsePane);
		schedulerPanel.add(showBlockedCollapsePane);
		schedulerPanel.add(showCategoryCollapsePane);
		schedulerPanel.add(commandFeedback);
		schedulerPanel.add(inputCommand);
		String[] headers = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
		// headers for calendar
		for (int i = 0; i < 7; i++) {
			calendarDTM.addColumn(headers[i]);// add it on top column(left to
			// right)
		}
		setCalendarTableProperties();//set restrictions for calendar
		calendarDTM.setColumnCount(7);// set no of columns of calendar(inner)
		calendarDTM.setRowCount(6);// set no of rows of calendar(inner)
		setValuesCombox();// combo box for selectYear
		refreshCalendar(actualMonth, actualYear); // Refresh calendar
		prevMonth.addActionListener(new Prev_Year());
		nextMonth.addActionListener(new Next_Year());
		selectYear.addActionListener(new Years_Action());
		inputCommand.requestFocusInWindow();//will focus to inputCommand 
											//Textfield when program starts
		executeKeyAction(commandFeedback, showUserRecentAddedTaskCommand,
				showCategory, showBlocked, showTasksScroll,
				showUserRecentAddedTaskScroll, showCategoryScroll,
				showUserGuideCollapsePane, showTasksCollapsePane,
				showUserRecentAddedTaskCollapsePane, showBlockedCollapsePane,
				showCategoryCollapsePane);
	}
	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java
	 */

	 * @param commandFeedback
	 * @param showUserRecentAddedTaskCommand
	 * @param showCategory
	 * @param showBlocked
	 * @param showTasksScroll
	 * @param showUserRecentAddedTaskScroll
	 * @param showCategoryScroll
	 * @param showUserGuideCollapsePane
	 * @param showTasksCollapsePane
	 * @param showUserRecentAddedTaskCollapsePane
	 * @param showBlockedCollapsePane
	 * @param showCategoryCollapsePane
	 * check keys events
	 */
	private void executeKeyAction(final JTextArea commandFeedback,
			final JTextArea showUserRecentAddedTaskCommand,
			final JTextArea showCategory, final JTextArea showBlocked,
			final JScrollPane showTasksScroll,
			final JScrollPane showUserRecentAddedTaskScroll,
			final JScrollPane showCategoryScroll,
			final JXCollapsiblePane showUserGuideCollapsePane,
			final JXCollapsiblePane showTasksCollapsePane,
			final JXCollapsiblePane showUserRecentAddedTaskCollapsePane,
			final JXCollapsiblePane showBlockedCollapsePane,
			final JXCollapsiblePane showCategoryCollapsePane) {
		inputCommand.addKeyListener(new KeyAdapter() {
			public void keyPressed(KeyEvent e) {
				int key = e.getKeyCode();
				int tasksScrollPane = showTasksScroll.getVerticalScrollBar()
						.getModel().getValue();
				int valueCustomTextArea = showUserRecentAddedTaskScroll
						.getVerticalScrollBar().getModel().getValue();
				int valueCategoryScrollPane = showCategoryScroll
						.getVerticalScrollBar().getModel().getValue();
				switch (key) {
				case KeyEvent.VK_ENTER:
					userCommand = inputCommand.getText();
					if (userCommand.toLowerCase().startsWith("exit")) {
						inputCommand.setText("");
						commandFeedback.setText("");
						save();
						getJFrame().setVisible(false);
						break;
					}
					try {
						commandFeedback.setText(logic
								.executeInputCommand(userCommand));
					} catch (IOException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					} catch (ParseException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
					if (showUserRecentAddedTaskCollapsePane.isCollapsed()) {
						showUserGuideCollapsePane.setCollapsed(true);
						showUserRecentAddedTaskCollapsePane.setCollapsed(true);
						showTasksCollapsePane.setCollapsed(false);
						try {
							showUserRecentAddedTaskCommand.setText(logic
									.getData(userCommand));
						} catch (IOException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						} catch (ParseException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
						refreshTasksTableForDisplay(userCommand);// refresh
						// displayTasksTable
					} else {
						refreshTasksTableForDisplay(userCommand);// refresh
						// displayTasksTable
						try {
							showUserRecentAddedTaskCommand.setText(logic
									.getData(userCommand));
						} catch (IOException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						} catch (ParseException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					inputCommand.setText("");
					showCategory.setText(logic.getCategory());
					refreshTasksTableForDisplay(userCommand);
					refreshCalendar(currentDisplayedMonth, currentDisplayedYear);
					break;
				case KeyEvent.VK_F1:
					commandFeedback.setText("");
					showUserGuideCollapsePane.setCollapsed(false);
					showUserRecentAddedTaskCollapsePane.setCollapsed(true);
					showTasksCollapsePane.setCollapsed(true);
					break;
				case KeyEvent.VK_F2:
					commandFeedback.setText("");
					try {
						showUserRecentAddedTaskCommand.setText(logic
								.getData(userCommand));
					} catch (IOException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					} catch (ParseException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
					showUserRecentAddedTaskCollapsePane.setCollapsed(false);
					showUserGuideCollapsePane.setCollapsed(true);
					showTasksCollapsePane.setCollapsed(true);
					break;
				case KeyEvent.VK_F3:
					commandFeedback.setText("");
					refreshTasksTableForDisplay("");
					refreshTasksTableForDisplay("");
					showTasksCollapsePane.setCollapsed(false);
					showUserRecentAddedTaskCollapsePane.setCollapsed(true);
					showUserGuideCollapsePane.setCollapsed(true);
					break;
				case KeyEvent.VK_F4:
					if (showBlockedCollapsePane.isCollapsed()) {
						showBlocked.setText(logic.getBlock());
						showBlockedCollapsePane.setCollapsed(false);
						showCategoryCollapsePane.setCollapsed(true);
					} else {
						showBlockedCollapsePane.setCollapsed(true);
						showCategoryCollapsePane.setCollapsed(false);
					}
					break;
				case KeyEvent.VK_F5:
					showTasksScroll.getVerticalScrollBar().getModel()
							.setValue(tasksScrollPane - 5);
					break;
				case KeyEvent.VK_F6:
					showTasksScroll.getVerticalScrollBar().getModel()
							.setValue(tasksScrollPane + 5);
					break;
				case KeyEvent.VK_F7:
					showUserRecentAddedTaskScroll.getVerticalScrollBar()
							.getModel().setValue(valueCustomTextArea - 5);
					break;
				case KeyEvent.VK_F8:
					showUserRecentAddedTaskScroll.getVerticalScrollBar()
							.getModel().setValue(valueCustomTextArea + 5);
					break;
				case KeyEvent.VK_F9:
					showCategoryScroll.getVerticalScrollBar().getModel()
							.setValue(valueCategoryScrollPane - 5);
					break;
				case KeyEvent.VK_F10:
					showCategoryScroll.getVerticalScrollBar().getModel()
							.setValue(valueCategoryScrollPane + 5);
					break;
				case KeyEvent.VK_PAGE_UP:
					if (currentDisplayedMonth == 0
							&& currentDisplayedYear == actualYear) {
						break;
					}
					prevMth();
					break;
				case KeyEvent.VK_PAGE_DOWN:
					if (currentDisplayedMonth == 11
							&& currentDisplayedYear >= actualYear + 20) {
						break;
					}
					nextMth();
					break;
				default:
					break;
				}
			}
		});
	}

	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java
	 */

	 */
	@SuppressWarnings("unchecked")
	private void setValuesCombox() {
		for (int i = actualYear; i <= actualYear + 20; i++) {
			selectYear.addItem(String.valueOf(i));
		}
	}

	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java
	 */

	 */
	private void prevMth() {
		if (currentDisplayedMonth == 0) { // Back one year
			currentDisplayedMonth = 11;
			currentDisplayedYear -= 1;
		} else { // Back one month
			currentDisplayedMonth -= 1;
		}
		refreshCalendar(currentDisplayedMonth, currentDisplayedYear);
	}

	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java
	 */

	 */
	private void nextMth() {
		if (currentDisplayedMonth == 11) { // Foward one year
			currentDisplayedMonth = 0;
			currentDisplayedYear += 1;
		} else { // Foward one month
			currentDisplayedMonth += 1;
		}
		refreshCalendar(currentDisplayedMonth, currentDisplayedYear);
	}

	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java
	 */

	 * @return
	 */
	private String getGuide() {
		String guide = "HotKeys:" + "\n1: 'ctrl+o': Launch FlexiPlanner"
				+ "\n2: 'ctrl+m': Close FlexiPlanner"
				+ "\n3: 'ctrl+e': Exit FlexiPlanner" + "\n4: 'f1': Guide"
				+ "\n5: 'f2': Recent added tasks" + "\n6: 'f3': Tasks"
				+ "\n5: 'f4': Categories / Blocked"
				+ "\n7: 'f5': Scroll up Tasks" + "\n8: 'f6': Scroll down Tasks"
				+ "\n9: 'f7': Scroll up Recent added tasks"
				+ "\n10: 'f8': Scroll down Recent added tasks"
				+ "\n11: 'f9': Scroll up category"
				+ "\n12: 'f10': Scroll down category"
				+ "\n13: 'pgup': Previous month" + "\n14: 'pgdw': Next month";
		return guide;
	}

	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java
	 */

	 */
	private void setDisplayTaskTableProperties() {
		displayTaskTable.setModel(displayTasksTableDTM);
		displayTaskTable.setCellSelectionEnabled(false);
		displayTaskTable.setRowHeight(60);
		displayTaskTable.getColumnModel().getColumn(0)
				.setCellRenderer(new TasksTableRenderer());
		displayTaskTable.getColumnModel().getColumn(0).setPreferredWidth(30);
		displayTaskTable.getColumnModel().getColumn(1).setPreferredWidth(55);
		displayTaskTable.getColumnModel().getColumn(2).setPreferredWidth(65);
		displayTaskTable.getColumnModel().getColumn(3).setPreferredWidth(220);
		displayTaskTable.getColumnModel().getColumn(3).setMaxWidth(220);
		displayTaskTable.getColumnModel().getColumn(4).setPreferredWidth(90);
		displayTaskTable.getColumnModel().getColumn(5).setPreferredWidth(90);
		displayTaskTable.getColumnModel().getColumn(5).setMaxWidth(110);
		displayTaskTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
		displayTaskTable.getTableHeader().setResizingAllowed(false);
		displayTaskTable.getTableHeader().setReorderingAllowed(false);
		displayTaskTable.setColumnSelectionAllowed(false);
		displayTaskTable.setRowSelectionAllowed(false);
	}
	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java
	 */

	 */
	private void setCalendarTableProperties() {
		calendar.getTableHeader().setResizingAllowed(false);
		calendar.getTableHeader().setReorderingAllowed(false);
		calendar.setColumnSelectionAllowed(false);
		calendar.setRowSelectionAllowed(false);
		calendar.setRowHeight(40);
	}
	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java
	 */

	 * @param userCommand
	 */
	private void refreshTasksTableForDisplay(String userCommand) {
		// Clear table
		for (int i = 0; i < displayTasksTableDTM.getRowCount(); i++) {
			for (int j = 0; j < displayTasksTableDTM.getColumnCount(); j++) {
				displayTasksTableDTM.setValueAt("", i, j);
			}
		}
		overDueRow = logic.getOverdueRow();
		int row = 0;
		if (logic.getRequiredTask(userCommand) != null) {
			for (DisplayedEntry t : logic.getRequiredTask(userCommand)) {
				displayTasksTableDTM.setValueAt(row + 1, row, 0);
				if (t.getPriority() != null)
					displayTasksTableDTM.setValueAt(t.getPriority(), row, 1);
				if (t.getCategory() != null)
					displayTasksTableDTM.setValueAt(t.getCategory(), row, 2);
				if (t.getRemindDateTime() != null && t.getReminder() != null) {
					StringBuilder sb = new StringBuilder();
					DateTimeFormatter formatter = DateTimeFormatter
							.ofLocalizedDateTime(FormatStyle.MEDIUM,
									FormatStyle.SHORT);
					String remindDateTime = t.getRemindDateTime().format(
							formatter);
					sb.append(t.getContent() + " ");
					sb.append("[reminder:" + remindDateTime + "]");
					displayTasksTableDTM.setValueAt(sb.toString(), row, 3);
				} else {
					displayTasksTableDTM.setValueAt(t.getContent(), row, 3);
				}
				try {
					if (t.getStartDateTime() != null) {
						displayTasksTableDTM.setValueAt(t.getStartDateTime(),
								row, 4);
					}
					if (t.getEndDateTime() != null) {
						displayTasksTableDTM.setValueAt(t.getEndDateTime(),
								row, 5);
					}
				} catch (java.text.ParseException e) {
					System.out.println("");
				}
				row++;
				if (row == 50) {
					break;
				}
			}
		}
		displayTaskTable.setDefaultRenderer(displayTaskTable.getColumnClass(0),
				new TextWrapRenderer());
	}

	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java
	 */

	 *
	 *TasksTableRenderer is used for colouring the index column of displayTasksTable
	 */
	@SuppressWarnings("serial")
	class TasksTableRenderer extends DefaultTableCellRenderer {
		@SuppressWarnings("unused")
		public Component getTableCellRendererComponent(JTable table,
				Object value, boolean selected, boolean focused, int row,
				int column) {
			Component c = super.getTableCellRendererComponent(table, value,
					selected, focused, row, column);
			if (row == overDueRow && overDueRow == 0) {
				if (table.getModel().getValueAt(row, 4) != null
						&& !(((String) table.getModel().getValueAt(row, 4))
								.equals(""))) {
					String start = table.getModel().getValueAt(row, 4)
							.toString();
					LocalDateTime s = LocalDateTime.parse(start,
							DateTimeFormatter.ofPattern("d MMM yyyy HH:mm"));
					if ((s.getYear() == LocalDateTime.now().getYear())
							&& (s.getMonthValue() == LocalDateTime.now()
									.getMonthValue())
							&& (s.getDayOfMonth() == LocalDateTime.now()
									.getDayOfMonth())) {

						setBackground(Color.MAGENTA);
					} else if (s.isBefore(LocalDateTime.now())) {
						setBackground(Color.RED);
					} else {
						setBackground(Color.ORANGE);
					}
				} else if (table.getModel().getValueAt(row, 4) != null
						&& !(((String) table.getModel().getValueAt(row, 5))
								.equals(""))) {
					String end = table.getModel().getValueAt(row, 5).toString();
					LocalDateTime e = LocalDateTime.parse(end,
							DateTimeFormatter.ofPattern("d MMM yyyy HH:mm"));
					if ((e.getYear() == LocalDateTime.now().getYear())
							&& (e.getMonthValue() == LocalDateTime.now()
									.getMonthValue())
							&& (e.getDayOfMonth() == LocalDateTime.now()
									.getDayOfMonth())) {

						setBackground(Color.MAGENTA);
					} else if (e.isBefore(LocalDateTime.now())) {
						setBackground(Color.RED);
					} else {
						setBackground(Color.ORANGE);
					}
				} else {
					setBackground(Color.ORANGE);
				}
				if (table.getModel().getValueAt(row, 3) == null
						|| (((String) table.getModel().getValueAt(row, 3))
								.equals(""))) {
					setBackground(Color.WHITE);
				}
			} else if (row <= overDueRow - 1) {
				setBackground(Color.RED);
			} else {
				if (table.getModel().getValueAt(row, 4) != null
						&& !(((String) table.getModel().getValueAt(row, 4))
								.equals(""))) {
					String start = table.getModel().getValueAt(row, 4)
							.toString();
					LocalDateTime s = LocalDateTime.parse(start,
							DateTimeFormatter.ofPattern("d MMM yyyy HH:mm"));
					if ((s.getYear() == LocalDateTime.now().getYear())
							&& (s.getMonthValue() == LocalDateTime.now()
									.getMonthValue())
							&& (s.getDayOfMonth() == LocalDateTime.now()
									.getDayOfMonth())) {

						setBackground(Color.MAGENTA);
					} else if (s.isBefore(LocalDateTime.now())) {
						setBackground(Color.RED);
					} else {
						setBackground(Color.ORANGE);
					}
				} else if (table.getModel().getValueAt(row, 5) != null
						&& !(((String) table.getModel().getValueAt(row, 5))
								.equals(""))) {
					String end = table.getModel().getValueAt(row, 5).toString();
					LocalDateTime e = LocalDateTime.parse(end,
							DateTimeFormatter.ofPattern("d MMM yyyy HH:mm"));
					if ((e.getYear() == LocalDateTime.now().getYear())
							&& (e.getMonthValue() == LocalDateTime.now()
									.getMonthValue())
							&& (e.getDayOfMonth() == LocalDateTime.now()
									.getDayOfMonth())) {

						setBackground(Color.MAGENTA);
					} else if (e.isBefore(LocalDateTime.now())) {
						setBackground(Color.RED);
					} else {
						setBackground(Color.ORANGE);
					}
				} else {
					setBackground(Color.ORANGE);
				}
				if (table.getModel().getValueAt(row, 3) == null
						|| (((String) table.getModel().getValueAt(row, 3))
								.equals(""))) {
					setBackground(Color.WHITE);
				}
			}
			if (value != null) {
				;
			}
			setBorder(null);
			return this;
		}
	}

	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java
	 */

	 *
	 *This class wraps the text in the cells and also in terms of word
	 */
	@SuppressWarnings("serial")
	class TextWrapRenderer extends DefaultTableCellRenderer {
		public Component getTableCellRendererComponent(JTable table,
				Object value, boolean selected, boolean focused, int row,
				int column) {

			JTextArea area = new JTextArea();
			area.setEditable(false);
			area.setLineWrap(true);
			area.setWrapStyleWord(true);
			area.setText(value.toString());

			if (column == 3) {
				if (value instanceof String) {
					if (((String) value).startsWith("[reminder :")) {
						String[] string = ((String) value).split(" ");
						StringBuilder sb = new StringBuilder();
						sb.append(string[0] + " ");
						sb.append(string[1]);
						area.setText(sb.toString());
					}
				}
			}

			setBorder(null);
			return area;
		}
	}

	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java
	 */

	 * @param month
	 * @param year
	 */
	private void refreshCalendar(int month, int year) {
		int nod, som; // Number Of Days, Start Of Month
		prevMonth.setEnabled(true);// enable button
		nextMonth.setEnabled(true);// enable button
		if (month == 0 && year == actualYear) {
			prevMonth.setEnabled(false);
		} // disable button as already pass
		if (month == 11 && year >= actualYear + 20) {
			nextMonth.setEnabled(false);
		} // disable button as out of range
		displayedMonth.setText(months[month]); // Refresh the month label (at
		// the top)
		displayedMonth.setBounds(
				160 - displayedMonth.getPreferredSize().width / 2, 5, 180, 25); // Re-align
		// label
		// with
		// calendar
		selectYear.setSelectedItem(String.valueOf(year)); // Select the correct
		// year in the combo
		// box
		// Clear table
		for (int i = 0; i < 6; i++) {
			for (int j = 0; j < 7; j++) {
				calendarDTM.setValueAt(null, i, j);
			}
		}
		GregorianCalendar cal = new GregorianCalendar(year, month, 1);
		nod = cal.getActualMaximum(GregorianCalendar.DAY_OF_MONTH);
		som = cal.get(GregorianCalendar.DAY_OF_WEEK);
		for (int i = 1; i <= nod; i++) {
			int row = new Integer((i + som - 2) / 7);
			int column = (i + som - 2) % 7;
			calendarDTM.setValueAt(i, row, column);
		}// set value for the days displayed
		calendar.setDefaultRenderer(calendar.getColumnClass(0),
				new CalendarRenderer());
	}
		
	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java
	 */

	 *
	 *CalendarRenderer used for editting the colours in Calendar cells
	 */
	@SuppressWarnings("serial")
	class CalendarRenderer extends DefaultTableCellRenderer {
		public Component getTableCellRendererComponent(JTable table,
				Object value, boolean selected, boolean focused, int row,
				int column) {
			super.getTableCellRendererComponent(table, value, selected,
					focused, row, column);
			if (column == 0 || column == 6) { // Week-end
				setBackground(Color.PINK);
			} else { // Weekday
				setBackground(Color.WHITE);
			}
			if (value != null) {
				String date = Integer.parseInt(value.toString()) + " "
						+ months[currentDisplayedMonth] + " "
						+ currentDisplayedYear;
				if (Integer.parseInt(value.toString()) == actualDay
						&& currentDisplayedMonth == actualMonth
						&& currentDisplayedYear == actualYear) { // Today
					try {
						if (logic.hasTask(date)) {
							setBackground(Color.MAGENTA);// set colour for
							// current day
							// with task
						} else {
							setBackground(Color.GRAY);// set colour current
							// day
						}
					} catch (IOException | ParseException e) {
						// TODO Auto-generated catch block
						setBackground(Color.GRAY);
						e.printStackTrace();
					}
				} else
					try {
						if (logic.hasTask(date)
								&& (Integer.parseInt(value.toString()) < actualDay)
								&& (currentDisplayedMonth == actualMonth)
								&& (currentDisplayedYear == actualYear)) {
							setBackground(Color.RED);
						} else if (logic.hasTask(date)
								&& (currentDisplayedMonth < actualMonth)
								&& (currentDisplayedYear == actualYear)) {
							setBackground(Color.RED);
						} else if (logic.hasTask(date)
								&& (currentDisplayedYear < actualYear)) {
							setBackground(Color.RED);
						} else if (logic.hasTask(date)) {
							setBackground(Color.ORANGE);
						}
					} catch (IOException | ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
			}
			setBorder(null);
			return this;
		}
	}

	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java
	 */

	 *
	 */
	class Prev_Year implements ActionListener {
		public void actionPerformed(ActionEvent e) {
			if (currentDisplayedMonth == 0) { // Back one year
				currentDisplayedMonth = 11;
				currentDisplayedYear -= 1;
			} else { // Back one month
				currentDisplayedMonth -= 1;
			}
			refreshCalendar(currentDisplayedMonth, currentDisplayedYear);
		}
	}

	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java
	 */

	 *
	 */
	class Next_Year implements ActionListener {
		public void actionPerformed(ActionEvent e) {
			if (currentDisplayedMonth == 11) { // Foward one year
				currentDisplayedMonth = 0;
				currentDisplayedYear += 1;
			} else { // Foward one month
				currentDisplayedMonth += 1;
			}
			refreshCalendar(currentDisplayedMonth, currentDisplayedYear);
		}
	}
	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java
	 */

	 *
	 */
	class Years_Action implements ActionListener {
		public void actionPerformed(ActionEvent e) {
			if (selectYear.getSelectedItem() != null) {
				String b = selectYear.getSelectedItem().toString();
				currentDisplayedYear = Integer.parseInt(b);
				refreshCalendar(currentDisplayedMonth, currentDisplayedYear);
			}
		}
	}
	
	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java
	 */

	 * @return
	 * This method is created for unit testing
	 */
	public boolean getUserGuideCollapseOrNot() {
		return showUserGuideCollapsePane.isCollapsed();
	}
	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java
	 */

	 * @return
	 * This method is created for unit testing
	 */
	public boolean getBlockedCollapseOrNot() {
		return showBlockedCollapsePane.isCollapsed();
	}
	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java
	 */

	 * @param text
	 * This method is created for unit testing
	 */
	public void setTextField(String text) {
		inputCommand.setText(text);
	}
	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java
	 */

	 * @return
	 * This method is created for unit testing
	 */
	public String getTextField() {
		return inputCommand.getText();
	}
	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java
	 */

	 * @return
	 * This method is created for unit testing
	 */
	public String getCategoryLabel() {
		return showCategoryLabel.getText();
	}
	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java
	 */

	 * @return
	 * This method is created for unit testing
	 */
	public String getCommandFeedback() {
		return commandFeedback.getText();
	}
	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java
	 */

	 * @return
	 * This method is created for unit testing
	 */
	public Object getSelectYear() {
		return selectYear.getSelectedItem();
	}
	
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\src\ui\FlexiPlannerUI.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\unit-tests\ui\FlexiPlannerUITest.java
	 */

 *
 */
public class FlexiPlannerUITest {
	FlexiPlannerUI userInterface = new FlexiPlannerUI();
	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\unit-tests\ui\FlexiPlannerUITest.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\unit-tests\ui\FlexiPlannerUITest.java
	 */

	 * @throws Exception
	 */
	@Before
	public void setUp() throws Exception {
		userInterface.loadUI();
	}

	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\unit-tests\ui\FlexiPlannerUITest.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\unit-tests\ui\FlexiPlannerUITest.java
	 */

	 * @throws Exception
	 */
	@After
	public void tearDown() throws Exception {
	}
	
	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\unit-tests\ui\FlexiPlannerUITest.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\unit-tests\ui\FlexiPlannerUITest.java
	 */

	 */
	@Test 
	public void testSchedulerFrame(){
		assertTrue(userInterface.getJFrame().isVisible());
	}
	
	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\unit-tests\ui\FlexiPlannerUITest.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\unit-tests\ui\FlexiPlannerUITest.java
	 */

	 */
	@Test
	public void testTextField() {
		assertEquals("",userInterface.getTextField());
		userInterface.setTextField("testing");
		assertEquals("testing",userInterface.getTextField());
		userInterface.setTextField("testing 12345");
		assertEquals("testing 12345",userInterface.getTextField());	
	}
	
	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\unit-tests\ui\FlexiPlannerUITest.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\unit-tests\ui\FlexiPlannerUITest.java
	 */

	 */
	@Test
	public void testShowUserGuideCollapsePane(){
		assertFalse(userInterface.getUserGuideCollapseOrNot());
	}
	
	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\unit-tests\ui\FlexiPlannerUITest.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\unit-tests\ui\FlexiPlannerUITest.java
	 */

	 */
	@Test
	public void testBlockedCollapsePane(){
		assertTrue(userInterface.getBlockedCollapseOrNot());
	}
	
	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\unit-tests\ui\FlexiPlannerUITest.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\unit-tests\ui\FlexiPlannerUITest.java
	 */

	 */
	@Test
	public void testShowCategoryLabel(){
		assertEquals("Categories",userInterface.getCategoryLabel());
	}
	
	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\unit-tests\ui\FlexiPlannerUITest.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\unit-tests\ui\FlexiPlannerUITest.java
	 */

	 */
	@Test
	public void testCommandFeedback(){
		assertEquals("",userInterface.getCommandFeedback());
	}
	
	/**
	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\unit-tests\ui\FlexiPlannerUITest.java





	/**
	 * origin: C:\Users\Kamui\git\main\FlexiPlanner\unit-tests\ui\FlexiPlannerUITest.java
	 */

	 */
	@Test
	public void testSelectYear(){
		assertEquals("2014",userInterface.getSelectYear().toString());
	}
	
}

	// End of segment: C:\Users\Kamui\git\main\FlexiPlanner\unit-tests\ui\FlexiPlannerUITest.java





